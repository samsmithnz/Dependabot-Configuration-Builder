name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    outputs: 
      Version: ${{ steps.gitversion.outputs.SemVer }} 
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}  
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: 5.x
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    #Setup, Build and Test .NET 
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Build
      run: dotnet build src/DCB/DCB.csproj -c:Release -p:Version='${{ steps.gitversion.outputs.SemVer }}'
    - name: Test
      run: dotnet test src/DCB.Tests/DCB.Tests.csproj
    - name: Upload package back to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: drop
        path: src/DCB/bin/Release/net6.0  
  
#  buildLinux:
#    runs-on: ubuntu-latest

  Release:
    runs-on: ubuntu-latest
    needs: build
    #if: github.ref == 'refs/heads/main'      
    steps:
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.build.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
    - name: Download package artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: drop    
    - name: looking for the files
      run: |
        cd drop
        ls 
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      with:
        artifacts: drop/DCB.exe
        tag: ${{ needs.build.outputs.Version }}
        name: Release ${{ needs.build.outputs.Version }}
        token: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
